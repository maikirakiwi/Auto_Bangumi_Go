// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package store

import (
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type configModel_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var ConfigModelBinding = configModel_EntityInfo{
	Entity: objectbox.Entity{
		Id: 2,
	},
	Uid: 3661136741022149026,
}

// ConfigModel_ contains type-based Property helpers to facilitate some common operations such as Queries.
var ConfigModel_ = struct {
	Id                             *objectbox.PropertyUint64
	Program_RssTime                *objectbox.PropertyInt64
	Program_RenameTime             *objectbox.PropertyInt64
	Program_WebuiPort              *objectbox.PropertyInt64
	Program_DataVersion            *objectbox.PropertyInt64
	Downloader_Type                *objectbox.PropertyString
	Downloader_Host                *objectbox.PropertyString
	Downloader_Username            *objectbox.PropertyString
	Downloader_Password            *objectbox.PropertyString
	Downloader_Path                *objectbox.PropertyString
	Downloader_Ssl                 *objectbox.PropertyBool
	RssParser_Enable               *objectbox.PropertyBool
	RssParser_Type                 *objectbox.PropertyString
	RssParser_CustomUrl            *objectbox.PropertyString
	RssParser_Token                *objectbox.PropertyString
	RssParser_EnableTmdb           *objectbox.PropertyBool
	RssParser_Filter               *objectbox.PropertyStringVector
	RssParser_Language             *objectbox.PropertyString
	BangumiManage_Enable           *objectbox.PropertyBool
	BangumiManage_EpsComplete      *objectbox.PropertyBool
	BangumiManage_RenameMethod     *objectbox.PropertyString
	BangumiManage_GroupTag         *objectbox.PropertyBool
	BangumiManage_RemoveBadTorrent *objectbox.PropertyBool
	Log_DebugEnable                *objectbox.PropertyBool
	Proxy_Enable                   *objectbox.PropertyBool
	Proxy_Type                     *objectbox.PropertyString
	Proxy_Host                     *objectbox.PropertyString
	Proxy_Port                     *objectbox.PropertyInt64
	Proxy_Username                 *objectbox.PropertyString
	Proxy_Password                 *objectbox.PropertyString
	Notification_Enable            *objectbox.PropertyBool
	Notification_Type              *objectbox.PropertyString
	Notification_Token             *objectbox.PropertyString
	Notification_ChatId            *objectbox.PropertyString
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Program_RssTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Program_RenameTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Program_WebuiPort: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Program_DataVersion: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Host: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Username: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Password: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Path: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Downloader_Ssl: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     13,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_CustomUrl: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     14,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_Token: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     15,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_EnableTmdb: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     16,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_Filter: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     17,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	RssParser_Language: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     18,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	BangumiManage_Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     19,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	BangumiManage_EpsComplete: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     20,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	BangumiManage_RenameMethod: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     21,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	BangumiManage_GroupTag: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     22,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	BangumiManage_RemoveBadTorrent: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     23,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Log_DebugEnable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     24,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     25,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     26,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Host: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     27,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Port: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     28,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Username: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     29,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Proxy_Password: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     30,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Notification_Enable: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id:     31,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Notification_Type: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     32,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Notification_Token: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     33,
			Entity: &ConfigModelBinding.Entity,
		},
	},
	Notification_ChatId: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     34,
			Entity: &ConfigModelBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (configModel_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (configModel_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("ConfigModel", 2, 3661136741022149026)
	model.Property("Id", 6, 1, 8125849693716546212)
	model.PropertyFlags(1)
	model.Property("Program_RssTime", 6, 2, 5662346678435714481)
	model.Property("Program_RenameTime", 6, 3, 2463631715779816002)
	model.Property("Program_WebuiPort", 6, 4, 3309648394766472774)
	model.Property("Program_DataVersion", 6, 5, 4807877462437965747)
	model.Property("Downloader_Type", 9, 6, 8054484895774020424)
	model.Property("Downloader_Host", 9, 7, 3684837363773412374)
	model.Property("Downloader_Username", 9, 8, 2366179354900616047)
	model.Property("Downloader_Password", 9, 9, 942151848596891033)
	model.Property("Downloader_Path", 9, 10, 4402424937054323597)
	model.Property("Downloader_Ssl", 1, 11, 2249068158182603511)
	model.Property("RssParser_Enable", 1, 12, 3643497309359179891)
	model.Property("RssParser_Type", 9, 13, 5490835588360756870)
	model.Property("RssParser_CustomUrl", 9, 14, 5295983031754260650)
	model.Property("RssParser_Token", 9, 15, 6710387785047590517)
	model.Property("RssParser_EnableTmdb", 1, 16, 3883644065902550674)
	model.Property("RssParser_Filter", 30, 17, 3724823413314131943)
	model.Property("RssParser_Language", 9, 18, 4676840664400275141)
	model.Property("BangumiManage_Enable", 1, 19, 5030285474841923529)
	model.Property("BangumiManage_EpsComplete", 1, 20, 7906350696996127280)
	model.Property("BangumiManage_RenameMethod", 9, 21, 1567729220321130672)
	model.Property("BangumiManage_GroupTag", 1, 22, 452355497554159323)
	model.Property("BangumiManage_RemoveBadTorrent", 1, 23, 8975017158628021801)
	model.Property("Log_DebugEnable", 1, 24, 8898045258262416229)
	model.Property("Proxy_Enable", 1, 25, 6690381397932035809)
	model.Property("Proxy_Type", 9, 26, 135807620441161786)
	model.Property("Proxy_Host", 9, 27, 5142955061390823344)
	model.Property("Proxy_Port", 6, 28, 6292683889318957038)
	model.Property("Proxy_Username", 9, 29, 2077519250318415404)
	model.Property("Proxy_Password", 9, 30, 6452389843982846459)
	model.Property("Notification_Enable", 1, 31, 6177924589514239839)
	model.Property("Notification_Type", 9, 32, 3775839149205514293)
	model.Property("Notification_Token", 9, 33, 3814450750971086140)
	model.Property("Notification_ChatId", 9, 34, 5845722247005825891)
	model.EntityLastPropertyId(34, 5845722247005825891)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (configModel_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*ConfigModel).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (configModel_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*ConfigModel).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (configModel_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (configModel_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*ConfigModel)
	var offsetDownloader_Type = fbutils.CreateStringOffset(fbb, obj.Downloader.Type)
	var offsetDownloader_Host = fbutils.CreateStringOffset(fbb, obj.Downloader.Host)
	var offsetDownloader_Username = fbutils.CreateStringOffset(fbb, obj.Downloader.Username)
	var offsetDownloader_Password = fbutils.CreateStringOffset(fbb, obj.Downloader.Password)
	var offsetDownloader_Path = fbutils.CreateStringOffset(fbb, obj.Downloader.Path)
	var offsetRssParser_Type = fbutils.CreateStringOffset(fbb, obj.RssParser.Type)
	var offsetRssParser_CustomUrl = fbutils.CreateStringOffset(fbb, obj.RssParser.CustomUrl)
	var offsetRssParser_Token = fbutils.CreateStringOffset(fbb, obj.RssParser.Token)
	var offsetRssParser_Filter = fbutils.CreateStringVectorOffset(fbb, obj.RssParser.Filter)
	var offsetRssParser_Language = fbutils.CreateStringOffset(fbb, obj.RssParser.Language)
	var offsetBangumiManage_RenameMethod = fbutils.CreateStringOffset(fbb, obj.BangumiManage.RenameMethod)
	var offsetProxy_Type = fbutils.CreateStringOffset(fbb, obj.Proxy.Type)
	var offsetProxy_Host = fbutils.CreateStringOffset(fbb, obj.Proxy.Host)
	var offsetProxy_Username = fbutils.CreateStringOffset(fbb, obj.Proxy.Username)
	var offsetProxy_Password = fbutils.CreateStringOffset(fbb, obj.Proxy.Password)
	var offsetNotification_Type = fbutils.CreateStringOffset(fbb, obj.Notification.Type)
	var offsetNotification_Token = fbutils.CreateStringOffset(fbb, obj.Notification.Token)
	var offsetNotification_ChatId = fbutils.CreateStringOffset(fbb, obj.Notification.ChatId)

	// build the FlatBuffers object
	fbb.StartObject(34)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, obj.Program.RssTime)
	fbutils.SetInt64Slot(fbb, 2, obj.Program.RenameTime)
	fbutils.SetInt64Slot(fbb, 3, obj.Program.WebuiPort)
	fbutils.SetInt64Slot(fbb, 4, obj.Program.DataVersion)
	fbutils.SetUOffsetTSlot(fbb, 5, offsetDownloader_Type)
	fbutils.SetUOffsetTSlot(fbb, 6, offsetDownloader_Host)
	fbutils.SetUOffsetTSlot(fbb, 7, offsetDownloader_Username)
	fbutils.SetUOffsetTSlot(fbb, 8, offsetDownloader_Password)
	fbutils.SetUOffsetTSlot(fbb, 9, offsetDownloader_Path)
	fbutils.SetBoolSlot(fbb, 10, obj.Downloader.Ssl)
	fbutils.SetBoolSlot(fbb, 11, obj.RssParser.Enable)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetRssParser_Type)
	fbutils.SetUOffsetTSlot(fbb, 13, offsetRssParser_CustomUrl)
	fbutils.SetUOffsetTSlot(fbb, 14, offsetRssParser_Token)
	fbutils.SetBoolSlot(fbb, 15, obj.RssParser.EnableTmdb)
	fbutils.SetUOffsetTSlot(fbb, 16, offsetRssParser_Filter)
	fbutils.SetUOffsetTSlot(fbb, 17, offsetRssParser_Language)
	fbutils.SetBoolSlot(fbb, 18, obj.BangumiManage.Enable)
	fbutils.SetBoolSlot(fbb, 19, obj.BangumiManage.EpsComplete)
	fbutils.SetUOffsetTSlot(fbb, 20, offsetBangumiManage_RenameMethod)
	fbutils.SetBoolSlot(fbb, 21, obj.BangumiManage.GroupTag)
	fbutils.SetBoolSlot(fbb, 22, obj.BangumiManage.RemoveBadTorrent)
	fbutils.SetBoolSlot(fbb, 23, obj.Log.DebugEnable)
	fbutils.SetBoolSlot(fbb, 24, obj.Proxy.Enable)
	fbutils.SetUOffsetTSlot(fbb, 25, offsetProxy_Type)
	fbutils.SetUOffsetTSlot(fbb, 26, offsetProxy_Host)
	fbutils.SetInt64Slot(fbb, 27, obj.Proxy.Port)
	fbutils.SetUOffsetTSlot(fbb, 28, offsetProxy_Username)
	fbutils.SetUOffsetTSlot(fbb, 29, offsetProxy_Password)
	fbutils.SetBoolSlot(fbb, 30, obj.Notification.Enable)
	fbutils.SetUOffsetTSlot(fbb, 31, offsetNotification_Type)
	fbutils.SetUOffsetTSlot(fbb, 32, offsetNotification_Token)
	fbutils.SetUOffsetTSlot(fbb, 33, offsetNotification_ChatId)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (configModel_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'ConfigModel' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	return &ConfigModel{
		Id: propId,
		Program: ProgramConfig{
			RssTime:     fbutils.GetInt64Slot(table, 6),
			RenameTime:  fbutils.GetInt64Slot(table, 8),
			WebuiPort:   fbutils.GetInt64Slot(table, 10),
			DataVersion: fbutils.GetInt64Slot(table, 12),
		},
		Downloader: DownloaderConfig{
			Type:     fbutils.GetStringSlot(table, 14),
			Host:     fbutils.GetStringSlot(table, 16),
			Username: fbutils.GetStringSlot(table, 18),
			Password: fbutils.GetStringSlot(table, 20),
			Path:     fbutils.GetStringSlot(table, 22),
			Ssl:      fbutils.GetBoolSlot(table, 24),
		},
		RssParser: RssParserConfig{
			Enable:     fbutils.GetBoolSlot(table, 26),
			Type:       fbutils.GetStringSlot(table, 28),
			CustomUrl:  fbutils.GetStringSlot(table, 30),
			Token:      fbutils.GetStringSlot(table, 32),
			EnableTmdb: fbutils.GetBoolSlot(table, 34),
			Filter:     fbutils.GetStringVectorSlot(table, 36),
			Language:   fbutils.GetStringSlot(table, 38),
		},
		BangumiManage: BangumiManageConfig{
			Enable:           fbutils.GetBoolSlot(table, 40),
			EpsComplete:      fbutils.GetBoolSlot(table, 42),
			RenameMethod:     fbutils.GetStringSlot(table, 44),
			GroupTag:         fbutils.GetBoolSlot(table, 46),
			RemoveBadTorrent: fbutils.GetBoolSlot(table, 48),
		},
		Log: LogConfig{
			DebugEnable: fbutils.GetBoolSlot(table, 50),
		},
		Proxy: ProxyConfig{
			Enable:   fbutils.GetBoolSlot(table, 52),
			Type:     fbutils.GetStringSlot(table, 54),
			Host:     fbutils.GetStringSlot(table, 56),
			Port:     fbutils.GetInt64Slot(table, 58),
			Username: fbutils.GetStringSlot(table, 60),
			Password: fbutils.GetStringSlot(table, 62),
		},
		Notification: NotificationConfig{
			Enable: fbutils.GetBoolSlot(table, 64),
			Type:   fbutils.GetStringSlot(table, 66),
			Token:  fbutils.GetStringSlot(table, 68),
			ChatId: fbutils.GetStringSlot(table, 70),
		},
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (configModel_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*ConfigModel, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (configModel_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*ConfigModel), nil)
	}
	return append(slice.([]*ConfigModel), object.(*ConfigModel))
}

// Box provides CRUD access to ConfigModel objects
type ConfigModelBox struct {
	*objectbox.Box
}

// BoxForConfigModel opens a box of ConfigModel objects
func BoxForConfigModel(ob *objectbox.ObjectBox) *ConfigModelBox {
	return &ConfigModelBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the ConfigModel.Id property on the passed object will be assigned the new ID as well.
func (box *ConfigModelBox) Put(object *ConfigModel) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the ConfigModel.Id property on the passed object will be assigned the new ID as well.
func (box *ConfigModelBox) Insert(object *ConfigModel) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *ConfigModelBox) Update(object *ConfigModel) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *ConfigModelBox) PutAsync(object *ConfigModel) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the ConfigModel.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the ConfigModel.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *ConfigModelBox) PutMany(objects []*ConfigModel) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *ConfigModelBox) Get(id uint64) (*ConfigModel, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*ConfigModel), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *ConfigModelBox) GetMany(ids ...uint64) ([]*ConfigModel, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*ConfigModel), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *ConfigModelBox) GetManyExisting(ids ...uint64) ([]*ConfigModel, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*ConfigModel), nil
}

// GetAll reads all stored objects
func (box *ConfigModelBox) GetAll() ([]*ConfigModel, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*ConfigModel), nil
}

// Remove deletes a single object
func (box *ConfigModelBox) Remove(object *ConfigModel) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *ConfigModelBox) RemoveMany(objects ...*ConfigModel) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the ConfigModel_ struct to create conditions.
// Keep the *ConfigModelQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *ConfigModelBox) Query(conditions ...objectbox.Condition) *ConfigModelQuery {
	return &ConfigModelQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the ConfigModel_ struct to create conditions.
// Keep the *ConfigModelQuery if you intend to execute the query multiple times.
func (box *ConfigModelBox) QueryOrError(conditions ...objectbox.Condition) (*ConfigModelQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &ConfigModelQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See ConfigModelAsyncBox for more information.
func (box *ConfigModelBox) Async() *ConfigModelAsyncBox {
	return &ConfigModelAsyncBox{AsyncBox: box.Box.Async()}
}

// ConfigModelAsyncBox provides asynchronous operations on ConfigModel objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type ConfigModelAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForConfigModel creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use ConfigModelBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForConfigModel(ob *objectbox.ObjectBox, timeoutMs uint64) *ConfigModelAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 2, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 2: %s" + err.Error())
	}
	return &ConfigModelAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *ConfigModelAsyncBox) Put(object *ConfigModel) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *ConfigModelAsyncBox) Insert(object *ConfigModel) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *ConfigModelAsyncBox) Update(object *ConfigModel) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *ConfigModelAsyncBox) Remove(object *ConfigModel) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all ConfigModel which Id is either 42 or 47:
//
//	box.Query(ConfigModel_.Id.In(42, 47)).Find()
type ConfigModelQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *ConfigModelQuery) Find() ([]*ConfigModel, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*ConfigModel), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *ConfigModelQuery) Offset(offset uint64) *ConfigModelQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *ConfigModelQuery) Limit(limit uint64) *ConfigModelQuery {
	query.Query.Limit(limit)
	return query
}

type cache_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var CacheBinding = cache_EntityInfo{
	Entity: objectbox.Entity{
		Id: 3,
	},
	Uid: 537516317625272234,
}

// Cache_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Cache_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &CacheBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (cache_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (cache_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Cache", 3, 537516317625272234)
	model.Property("Id", 6, 1, 2477299678240676857)
	model.PropertyFlags(1)
	model.EntityLastPropertyId(1, 2477299678240676857)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (cache_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Cache).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (cache_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Cache).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (cache_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (cache_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (cache_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Cache' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	return &Cache{
		Id: propId,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (cache_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Cache, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (cache_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*Cache), nil)
	}
	return append(slice.([]*Cache), object.(*Cache))
}

// Box provides CRUD access to Cache objects
type CacheBox struct {
	*objectbox.Box
}

// BoxForCache opens a box of Cache objects
func BoxForCache(ob *objectbox.ObjectBox) *CacheBox {
	return &CacheBox{
		Box: ob.InternalBox(3),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Cache.Id property on the passed object will be assigned the new ID as well.
func (box *CacheBox) Put(object *Cache) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Cache.Id property on the passed object will be assigned the new ID as well.
func (box *CacheBox) Insert(object *Cache) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *CacheBox) Update(object *Cache) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *CacheBox) PutAsync(object *Cache) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Cache.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Cache.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *CacheBox) PutMany(objects []*Cache) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *CacheBox) Get(id uint64) (*Cache, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Cache), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *CacheBox) GetMany(ids ...uint64) ([]*Cache, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Cache), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *CacheBox) GetManyExisting(ids ...uint64) ([]*Cache, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Cache), nil
}

// GetAll reads all stored objects
func (box *CacheBox) GetAll() ([]*Cache, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Cache), nil
}

// Remove deletes a single object
func (box *CacheBox) Remove(object *Cache) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *CacheBox) RemoveMany(objects ...*Cache) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Cache_ struct to create conditions.
// Keep the *CacheQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *CacheBox) Query(conditions ...objectbox.Condition) *CacheQuery {
	return &CacheQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Cache_ struct to create conditions.
// Keep the *CacheQuery if you intend to execute the query multiple times.
func (box *CacheBox) QueryOrError(conditions ...objectbox.Condition) (*CacheQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &CacheQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See CacheAsyncBox for more information.
func (box *CacheBox) Async() *CacheAsyncBox {
	return &CacheAsyncBox{AsyncBox: box.Box.Async()}
}

// CacheAsyncBox provides asynchronous operations on Cache objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type CacheAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForCache creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use CacheBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForCache(ob *objectbox.ObjectBox, timeoutMs uint64) *CacheAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 3, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 3: %s" + err.Error())
	}
	return &CacheAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *CacheAsyncBox) Put(object *Cache) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *CacheAsyncBox) Insert(object *Cache) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *CacheAsyncBox) Update(object *Cache) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *CacheAsyncBox) Remove(object *Cache) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Cache which Id is either 42 or 47:
//
//	box.Query(Cache_.Id.In(42, 47)).Find()
type CacheQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *CacheQuery) Find() ([]*Cache, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Cache), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *CacheQuery) Offset(offset uint64) *CacheQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *CacheQuery) Limit(limit uint64) *CacheQuery {
	query.Query.Limit(limit)
	return query
}

type user_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var UserBinding = user_EntityInfo{
	Entity: objectbox.Entity{
		Id: 4,
	},
	Uid: 5924075746120306429,
}

// User_ contains type-based Property helpers to facilitate some common operations such as Queries.
var User_ = struct {
	Id       *objectbox.PropertyUint64
	Username *objectbox.PropertyString
	Password *objectbox.PropertyByteVector
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &UserBinding.Entity,
		},
	},
	Username: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &UserBinding.Entity,
		},
	},
	Password: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &UserBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (user_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (user_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("User", 4, 5924075746120306429)
	model.Property("Id", 6, 1, 4249876444728144710)
	model.PropertyFlags(1)
	model.Property("Username", 9, 2, 8194895899955558159)
	model.PropertyFlags(2080)
	model.PropertyIndex(1, 3015471243652167874)
	model.Property("Password", 23, 3, 5583198832391540710)
	model.EntityLastPropertyId(3, 5583198832391540710)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (user_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*User).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (user_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*User).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (user_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (user_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*User)
	var offsetUsername = fbutils.CreateStringOffset(fbb, obj.Username)
	var offsetPassword = fbutils.CreateByteVectorOffset(fbb, obj.Password)

	// build the FlatBuffers object
	fbb.StartObject(3)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetUOffsetTSlot(fbb, 1, offsetUsername)
	fbutils.SetUOffsetTSlot(fbb, 2, offsetPassword)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (user_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'User' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(4, 0)

	return &User{
		Id:       propId,
		Username: fbutils.GetStringSlot(table, 6),
		Password: fbutils.GetByteVectorSlot(table, 8),
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (user_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*User, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (user_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*User), nil)
	}
	return append(slice.([]*User), object.(*User))
}

// Box provides CRUD access to User objects
type UserBox struct {
	*objectbox.Box
}

// BoxForUser opens a box of User objects
func BoxForUser(ob *objectbox.ObjectBox) *UserBox {
	return &UserBox{
		Box: ob.InternalBox(4),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the User.Id property on the passed object will be assigned the new ID as well.
func (box *UserBox) Put(object *User) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the User.Id property on the passed object will be assigned the new ID as well.
func (box *UserBox) Insert(object *User) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *UserBox) Update(object *User) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *UserBox) PutAsync(object *User) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the User.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the User.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *UserBox) PutMany(objects []*User) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *UserBox) Get(id uint64) (*User, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*User), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *UserBox) GetMany(ids ...uint64) ([]*User, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*User), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *UserBox) GetManyExisting(ids ...uint64) ([]*User, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*User), nil
}

// GetAll reads all stored objects
func (box *UserBox) GetAll() ([]*User, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*User), nil
}

// Remove deletes a single object
func (box *UserBox) Remove(object *User) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *UserBox) RemoveMany(objects ...*User) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the User_ struct to create conditions.
// Keep the *UserQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *UserBox) Query(conditions ...objectbox.Condition) *UserQuery {
	return &UserQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the User_ struct to create conditions.
// Keep the *UserQuery if you intend to execute the query multiple times.
func (box *UserBox) QueryOrError(conditions ...objectbox.Condition) (*UserQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &UserQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See UserAsyncBox for more information.
func (box *UserBox) Async() *UserAsyncBox {
	return &UserAsyncBox{AsyncBox: box.Box.Async()}
}

// UserAsyncBox provides asynchronous operations on User objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type UserAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForUser creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use UserBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForUser(ob *objectbox.ObjectBox, timeoutMs uint64) *UserAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 4, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 4: %s" + err.Error())
	}
	return &UserAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *UserAsyncBox) Put(object *User) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *UserAsyncBox) Insert(object *User) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *UserAsyncBox) Update(object *User) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *UserAsyncBox) Remove(object *User) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all User which Id is either 42 or 47:
//
//	box.Query(User_.Id.In(42, 47)).Find()
type UserQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *UserQuery) Find() ([]*User, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*User), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *UserQuery) Offset(offset uint64) *UserQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *UserQuery) Limit(limit uint64) *UserQuery {
	query.Query.Limit(limit)
	return query
}
